
name: 'Terraform workflow deploy to Azure'

on:
  push:
    branches:
    - main
  # pull_request:
  # workflow_dispatch:
    

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  # ba
  # ARM_TENANT_ID: "d52c9ea1-7c21-47b1-82a3-33a74b1f74b8"
  # ARM_SUBSCRIPTION_ID: "3a6301fb-d5bf-4646-bd89-d506e7c3f2dd"
  # ARM_CLIENT_ID: "08a4808f-de8a-4fa2-828c-5ce3ad624046"

  
  ROOT_PATH: '${{ github.workspace }}/Terraform-Infra'


jobs:
  terraform_plan:
    name: 'Terraform plan'
    runs-on: ubuntu-latest
   
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ${{env.ROOT_PATH}}
   
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      working-directory: ${{env.ROOT_PATH}}

  terraform_destroy:
    name: 'Terraform destroy'
    runs-on: ubuntu-latest
    needs: [terraform_plan]
    environment: dev
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ${{env.ROOT_PATH}}
   
    # Generates an execution plan for Terraform
    - name: Terraform  destroy
      run: terraform destroy --auto-approve
      working-directory: ${{env.ROOT_PATH}}